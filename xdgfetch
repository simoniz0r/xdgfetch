#!/bin/bash
# A script that uses 'xdg-mime' to fetch the default apps on the system.
# Dependencies: 'xdg-mime', 'xdg-settings'
# Written by simonizor 5/27/2017 - http://www.simonizor.gq/linuxapps
# License: GPLv2 Only

bold="$(tput bold; tput setaf 7)"
norm="$(tput sgr0)"

programisinstalled () {
    type "$1" >/dev/null 2>&1
}

findpkgmanfunc () {
    type dpkg >/dev/null 2>&1 && PKGMAN="$(dpkg --list | wc -l)" || PKGMAN=""
    if [ -z "$PKGMAN" ]; then
        type rpm >/dev/null 2>&1 && PKGMAN="$(rpm -qa | wc -l)" || PKGMAN=""
    fi
    if [ -z "$PKGMAN" ]; then
        type pacman >/dev/null 2>&1 && PKGMAN="$(pacman -Qq --color never | wc -l)" || PKGMAN=""
    fi
    if [ -z "$PKGMAN" ]; then
        type equery >/dev/null 2>&1 && PKGMAN="$(equery list | wc -l)" || PKGMAN=""
    fi
    if [ -z "$PKGMAN" ]; then
        type xbps-query >/dev/null 2>&1 && PKGMAN="$(xbps-query -l | wc -l)" || PKGMAN="$(echo Unknown!)"
    fi
}

infofunc () {
    findpkgmanfunc
    if [ -f /etc/os-release ]; then
        . /etc/os-release
    fi
    DATE="${bold}Date:          ${norm}$(date)"
    VERSION_SIGNATURE="${bold}OS Version:    ${norm}$(cat /proc/version_signature 2>/dev/null || cat /proc/version | cut -f-3 -d" " || echo "Unknown!")"
    if [ -z "$PRETTY_NAME" ]; then
        PRETTY_NAME="$NAME"
    fi
    PRETTY_NAME="${bold}Name:          ${norm}$PRETTY_NAME"
    XDG_CURRENT_DESKTOP="${bold}Desktop:       ${norm}$XDG_CURRENT_DESKTOP"
    XDG_SESSION_TYPE="${bold}Session:       ${norm}$XDG_SESSION_TYPE"
    UPTIME="$(cat /proc/uptime | cut -f1 -d".")"
    UPTIME="${bold}Uptime:        ${norm}$(expr $UPTIME / 60) minutes"
    PROCESSES="${bold}Processes:     ${norm}$(ps -eo comm | wc -l)"
    PACKAGES="${bold}Packages:      ${norm}$PKGMAN"
    printf "${bold}System info:${norm}\n$DATE\n$VERSION_SIGNATURE\n$PRETTY_NAME\n$XDG_CURRENT_DESKTOP\n$XDG_SESSION_TYPE\n$UPTIME\n$PROCESSES\n$PACKAGES\n"
}

hardwarefunc () {
    RAM_TOTAL="$(cat /proc/meminfo | grep MemTotal | cut -f2- -d" " | tr -d 'kB[:space:]')"
    RAM_USED="$(cat /proc/meminfo | grep 'Active:' | cut -f2- -d" " | tr -d 'kB[:space:]')"
    RAM_USED="${bold}RAM Used:      ${norm}$(($RAM_USED/1000)) / $(($RAM_TOTAL/1000)) mB"
    RAM_TOTAL="${bold}RAM Total:     ${norm}$(expr $RAM_TOTAL / 1000) mB"
    SWAP_TOTAL="$(cat /proc/meminfo | grep SwapTotal | cut -f2- -d" " | tr -d 'kB[:space:]')"
    SWAP_FREE="$(cat /proc/meminfo | grep SwapFree | cut -f2- -d" " | tr -d 'kB[:space:]')"
    SWAP_USED="$(($SWAP_TOTAL-$SWAP_FREE))"
    if [ "$SWAP_USED" -lt "1000" ]; then
        SWAP_USED="$(echo $SWAP_USED kB)"
    else
        SWAP_USED="$(($SWAP_USED/1000))"
    fi
    SWAP_USED="${bold}Swap Used:     ${norm}$SWAP_USED / $(($SWAP_TOTAL/1000)) mB"
    CPU_INFO="${bold}CPU:           ${norm}$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | cut -c 14-)\n               cores: ${norm}$(cat /proc/cpuinfo | grep 'cpu MHz' | wc -l)\n               mhz: ${norm}$(cat /proc/cpuinfo | grep 'cpu MHz' | cut -c 12- | tr '\n' ' ')\n               load avg: ${norm}$(cat /proc/loadavg)"
    GPUS="${bold}GPU(s):${norm}        $(lspci -k | grep VGA | sed 's%VGA compatible controller:%%g')\n               memory: $(lspci -v | grep -A 9 'VGA' | grep '(64-bit, prefetchable)' | cut -f2 -d"=" | tr -d ']')\n               $(lspci -k | grep -A 2 VGA | cut -f2- -d" " | tail -n +3)"
    RESOLUTION="${bold}Resolution:    ${norm}$(xrandr | grep 'current' | cut -f2 -d"," | cut -f3- -d" ")"
    SOUND="${bold}Sound:         ${norm}$(lspci | grep 'Audio device:' | sed 's%Audio device:%%g')"
    ETHERNET="${bold}Ethernet:      ${norm}$(lspci | grep 'Ethernet controller:' | sed 's%Ethernet controller:%%g' || echo "None")"
    WIFI="${bold}WiFi:          ${norm}$(lspci | grep 'Network controller:' | sed 's%Network controller:%%g' || echo "None")"
    STORAGE="${bold}Storage:${norm}       $(df -hT / | tail -n +2 | cut -f-12 -d" " | sed 's:/dev/::g' | sed 's:      :  :g')"
    printf "${bold}Hardware:${norm}\n$RAM_USED\n$SWAP_USED\n$CPU_INFO\n$GPUS\n$RESOLUTION\n$SOUND\n$ETHERNET\n$WIFI\n$STORAGE\n"
}

appfunc () {
    SHELL="${bold}Shell:         ${norm}$(basename $SHELL)"
    XDGFILEMANAGER="$(xdg-mime query default inode/directory)" || XDGFILEMANAGER="Not set!        "
    case $XDGFILEMANAGER in
        *dolphin*|*Dolphin*)
                XDGFILEMANAGER="${bold}File Manager:  ${norm}Dolphin"
            ;;
        *thunar*|*Thunar*)
                XDGFILEMANAGER="${bold}File Manager:  ${norm}Thunar"
            ;;
        *pcmanfm*|*PCManFM*)
                XDGFILEMANAGER=o "${bold}File Manager:  ${norm}PCManFM"
            ;;
        *ranger*|*Ranger*)
                XDGFILEMANAGER= "${bold}File Manager:  ${norm}ranger"
            ;;
        *)
                XDGFILEMANAGER= "${bold}File Manager:  ${norm}${XDGFILEMANAGER::-8}"
            ;;
    esac
    XDGBROWSER="$(xdg-settings get default-web-browser)" || XDGBROWSER="Not set!        "
    case $XDGBROWSER in
        *Pale*|*pale*)
            XDGBROWSER="${bold}Browser:       ${norm}Pale Moon"
            ;;
        *firefox*)
            XDGBROWSER="${bold}Browser:       ${norm}Firefox"
            ;;
        *google*)
            XDGBROWSER="${bold}Browser:       ${norm}Google Chrome"
            ;;
        *chromium*)
            XDGBROWSER="${bold}Browser:       ${norm}Chromium"
            ;;
        *)
            XDGBROWSER="${bold}Browser:       ${norm}${XDGBROWSER::-8}"
            ;;
    esac
    XDGMAILTO="$(xdg-mime query default x-scheme-handler/mailto)" || XDGMAILTO="Not set!        "
    case $XDGMAILTO in
        *thunderbird*|*Thunderbird*)
            XDGMAILTO="${bold}Email:         ${norm}Thunderbird"
            ;;
        *kmail*)
            XDGMAILTO="${bold}Email:         ${norm}KMail"
            ;;
        *)
            XDGMAILTO="${bold}Email:         ${norm}${XDGMAILTO::-8}"
            ;;
    esac
    XDGAUDIO="$(xdg-mime query default audio/flac)" || XDGAUDIO="Not set!        "
    case $XDGAUDIO in
        *audacious*|*Audacious*)
            XDGAUDIO="${bold}Audio:         ${norm}Audacious"
            ;;
        *mpv*)
            XDGAUDIO="${bold}Audio:         ${norm}mpv"
            ;;
        *vlc*|*VLC*)
            XDGAUDIO="${bold}Audio:         ${norm}VLC"
            ;;
        *amarok*|*Amarok*)
            XDGAUDIO="${bold}Audio:         ${norm}Amarok"
            ;;
        *deadbeef*)
            XDGAUDIO="${bold}Audio:         ${norm}DeaDBeeF"
            ;;
        *)
            XDGAUDIO="${bold}Audio:         ${norm}${XDGAUDIO::-8}"
            ;;
    esac
    XDGVIDEO="$(xdg-mime query default video/mp4)" || XDGVIDEO="Not set!        "
    case $XDGVIDEO in
        *mpv*)
            XDGVIDEO="${bold}Video:         ${norm}mpv"
            ;;
        *vlc*|*VLC*)
            XDGVIDEO="${bold}Video:         ${norm}VLC"
            ;;
        *mplayer*)
            XDGVIDEO="${bold}Video:         ${norm}Mplayer"
            ;;
        *)
            XDGVIDEO="${bold}Video:         ${norm}${XDGVIDEO::-8}"
            ;;
    esac
    XDGIMAGE="$(xdg-mime query default image/png)" || XDGIMAGE="Not set!        "
    case $XDGIMAGE in
        *gwenview*|*Gwenview*)
            XDGIMAGE="${bold}Image:         ${norm}Gwenview"
            ;;
        *gimp*|*Gimp*|*GIMP*)
            XDGIMAGE="${bold}Image:         ${norm}GIMP"
            ;;
        *krita*|*Krita*)
            XDGIMAGE="${bold}Image:         ${norm}Krita"
            ;;
        *mtpaint*)
            XDGIMAGE="${bold}Image:         ${norm}mtpaint"
            ;;
        *)
            XDGIMAGE="${bold}Image:         ${norm}${XDGIMAGE::-8}"
            ;;
    esac
    XDGTEXT="$(xdg-mime query default text/plain)" || XDGTEXT="Not set!        "
    case $XDGTEXT in
        *code*)
            XDGTEXT="${bold}Text:          ${norm}VSCode"
            ;;
        *atom*|*Atom*)
            XDGTEXT="${bold}Text:          ${norm}Atom"
            ;;
        *gedit*|*Gedit*)
            XDGTEXT="${bold}Text:          ${norm}gedit"
            ;;
        *mousepad*|*Mousepad*)
            XDGTEXT="${bold}Text:          ${norm}Mousepad"
            ;;
        *notepadqq*|*Notepadqq*)
            XDGTEXT="${bold}Text:          ${norm}notepadqq"
            ;;
        *geany*|*Geany*)
            XDGTEXT="${bold}Text:          ${norm}Geany"
            ;;
        *kwrite*|*KWrite*)
            XDGTEXT="${bold}Text:          ${norm}KWrite"
            ;;
        *)
            XDGTEXT="${bold}Text:          ${norm}${XDGTEXT::-8}"
            ;;
    esac
    XDGOFFICE="$(xdg-mime query default application/vnd.ms-word)" || XDGOFFICE="Not set!        "
    case $XDGOFFICE in
        *libreoffice*|*LibreOffice*)
            XDGOFFICE="${bold}Office:        ${norm}LibreOffice"
            ;;
        *)
            XDGOFFICE="${bold}Office:        ${norm}${XDGOFFICE::-8}"
            ;;
    esac
    XDGARCHIVE="$(xdg-mime query default application/x-tar)" || XDGARCHIVE="Not set!        "
    case $XDGARCHIVE in
        *Ark*|*ark*)
            XDGARCHIVE="${bold}Archive:       ${norm}Ark"
            ;;
        *)
            XDGARCHIVE="${bold}Archive:       ${norm}${XDGARCHIVE::-8}"
            ;;
    esac
    XDGPGP="$(xdg-mime query default application/pgp-keys)" || XDGPGP="Not set!        "
    case $XDGPGP in
        *kgpg*|*KGpg*)
            XDGPGP="${bold}PGP:           ${norm}KGpg"
            ;;
        *)
            XDGPGP="${bold}PGP:           ${norm}${XDGPGP::-8}"
            ;;
    esac
    printf "${bold}Applications:${norm}\n$SHELL\n$XDGFILEMANAGER\n$XDGBROWSER\n$XDGMAILTO\n$XDGAUDIO\n$XDGVIDEO\n$XDGIMAGE\n$XDGTEXT\n$XDGOFFICE\n$XDGARCHIVE\n$XDGPGP\n"
}

directoriesfunc () {
    if [ -f ~/.config/user-dirs.dirs ]; then
        . ~/.config/user-dirs.dirs
        XDG_DESKTOP_DIR="${bold}Desktop:       ${norm}$XDG_DESKTOP_DIR"
        XDG_DOCUMENTS_DIR="${bold}Documents:     ${norm}$XDG_DOCUMENTS_DIR"
        XDG_DOWNLOAD_DIR="${bold}Downloads:     ${norm}$XDG_DOWNLOAD_DIR"
        XDG_MUSIC_DIR="${bold}Music:         ${norm}$XDG_MUSIC_DIR"
        XDG_PICTURES_DIR="${bold}Pictures:      ${norm}$XDG_PICTURES_DIR"
        XDG_PUBLICSHARE_DIR="${bold}Public:        ${norm}$XDG_PUBLICSHARE_DIR"
        XDG_TEMPLATES_DIR="${bold}Templates:     ${norm}$XDG_TEMPLATES_DIR"
        XDG_VIDEOS_DIR="${bold}Videos:        ${norm}$XDG_VIDEOS_DIR"
    fi
    printf "${bold}Default directories:${norm}\n$XDG_DESKTOP_DIR\n$XDG_DOCUMENTS_DIR\n$XDG_DOWNLOAD_DIR\n$XDG_MUSIC_DIR\n$XDG_PICTURES_DIR\n$XDG_PUBLICSHARE_DIR\n$XDG_TEMPLATES_DIR\n$XDG_VIDEOS_DIR\n"
}

xdgfetchmain () {
    case $1 in
        --help)
            printf "${bold}xdgfetch usage${norm}:\n${bold}xdgfetch${norm}:           Shows system, hardware, session, default program, and default directory info\n${bold}xdgfetch -c=n${norm}:      Changes the color of bold text; works with any valid tput color\n                    Ex: 'xdgfetch -c=1', 'xdgfetch -c=1 -i'\n${bold}xdgfetch -i${norm}:        Shows system info\n${bold}xdgfetch -h${norm}:        Shows hardware info\n${bold}xdgfetch -a${norm}:        Shows default applications\n${bold}xdgfetch -d${norm}:        Shows default directories\n${bold}xdgfetch --help${norm}:    Shows this help output\n"
            ;;
        -c*|--c*)
            case $COLOR in
                0*|1*|2*|3*|4*|5*|6*|7*|8*|9*)
                    bold=$(tput bold; tput setaf $COLOR)
                    ;;
                *)
                    echo "Invalid color choice."
                    exit 1
                    ;;
            esac
            ;;
        -i*|--i*)
            infofunc
            echo
            ;;
        -h*|--h*)
            hardwarefunc
            echo
            ;;
        -a*|--a*)
            appfunc
            echo
            ;;
        -d*|--d*)
            directoriesfunc
            echo
            ;;
    esac
}

programisinstalled "xdg-mime" || { echo "xdg-mime is not installed!"; exit 1; }
programisinstalled "xdg-settings" || { echo "xdg-settings is not installed!"; exit 1; }
if [ -z "$1" ]; then
    infofunc
    echo
    hardwarefunc
    echo
    appfunc
    echo
    directoriesfunc
    echo
else
    case $1 in
        *-c*)
            if [ -z "$2" ]; then
                COLOR="$(echo "$1" |cut -f2 -d"=")"
                case $COLOR in
                    0*|1*|2*|3*|4*|5*|6*|7*|8*|9*)
                        bold=$(tput bold; tput setaf $COLOR)
                        infofunc
                        echo
                        hardwarefunc
                        echo
                        appfunc
                        echo
                        directoriesfunc
                        echo
                        exit 0
                        ;;
                    *)
                        echo "Invalid color choice."
                        exit 1
                        ;;
                esac
            fi
            ;;
    esac
    for arg in $@; do
        COLOR="$(echo "$arg" |cut -f2 -d"=")"
        xdgfetchmain "$arg"
    done
fi
exit 0
